#!/usr/bin/env python

from mininet.topo import Topo
from mininet.net import Mininet
from mininet.node import Node  
from mininet.log import setLogLevel, info
from mininet.cli import CLI
from mininet.link import TCLink
from mininet.link import Intf

class LinuxRouter( Node ):
    "A Node with IP forwarding enabled."

    def config( self, **params ):
        super( LinuxRouter, self).config( **params )
        # Enable forwarding on the router
        self.cmd( 'sysctl net.ipv4.ip_forward=1' )

    def terminate( self ):
        self.cmd( 'sysctl net.ipv4.ip_forward=0' )
        super( LinuxRouter, self ).terminate()

class NetworkTopo( Topo ):
    "A simple network topology with multiple subnets"

    def build( self, **_opts ):

        # Add routers
        defaultIP = '10.0.1.1/24'
        router = self.addNode( 'r0', cls=LinuxRouter, ip=defaultIP )

        s1, s2= [ self.addSwitch( s ) for s in ( 's1','s2' )]

        h1 = self.addHost( 'h1', ip='10.0.1.100/24', defaultRoute='via 10.0.1.1' )
        h2 = self.addHost( 'h2', ip='10.0.2.100/24', defaultRoute='via 10.0.2.1' )
        #h3 = self.addHost( 'h3', ip='10.0.2.100/24', defaultRoute='via 10.0.2.1' )
        #h4 = self.addHost( 'h4', ip='10.0.2.101/24', defaultRoute='via 10.0.2.1' )

        enlace = {'cls',TCLink}

        self.addLink( s1, router, intfName2='r0eth1' **enlace )
        self.addLink( s2, router, intfName2='r0eth2', params2= { 'ip' : '10.0.2.1/24' }, **enlace )

        self.addLink( h1, s1, **enlace )
        self.addLink( h2, s2, **enlace )
        #self.addLink( h3, s2, **enlace )
        #self.addLink( h4, s2, **enlace )

    def run():
        "Test linux router"
        topo = NetworkTopo()
        net = Mininet( topo=topo, WaitConnected=True )

        _intf = Intf( 'enp2s0', node=net[ 's1' ] )
        _intf = Intf( 'enp3s0', node=net[ 's2' ] )

        net.start()
        info( '*** Routing Table on Router:\n' )
        info( net[ 'r0' ].cmd( 'route' ) )
        CLI( net )
        net.stop()

if __name__ == '__main__':
    setLogLevel( 'info' )
    run()

